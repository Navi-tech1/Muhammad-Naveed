{% comment %}
Product Grid (6) with Hover Info
- Choose 6 products individually
- Hover effect on product card: show product info overlay
- Responsive grid: 2 cols mobile, 3 cols desktop
- Quick view popup modal
- Auto-add Soft Winter Jacket when Black+Medium variants are selected
{% endcomment %}

<section id="section-{{ section.id }}" class="custom-grid">
  <div class="grid">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign prod = all_products[block.settings.product] %}
        <div class="card" {{ block.shopify_attributes }}>
          <a href="{{ prod.url }}" class="card-media">
            {% if prod.featured_image %}
              <img 
                src="{{ prod.featured_image | img_url: '400x' }}" 
                alt="{{ prod.title }}" 
                loading="lazy" 
              />
            {% endif %}
            <div class="hover-overlay">
              <div class="hover-info">
                <h3 class="card-title">{{ prod.title }}</h3>
                <div class="card-price">
                  {% if prod.price_varies %}
                    From {{ prod.price_min | money }}
                  {% else %}
                    {{ prod.price | money }}
                  {% endif %}
                </div>
                {% if prod.description != blank %}
                  <div class="card-desc">{{ prod.description | strip_html | truncate: 80 }}</div>
                {% endif %}
                <button class="quick-view-btn" data-product-id="{{ prod.id }}" data-product-handle="{{ prod.handle }}">
                  Quick View
                </button>
              </div>
            </div>
          </a>
        </div>
      {% else %}
        <div class="placeholder">Select a product</div>
      {% endif %}
    {% endfor %}
  </div>
</section>

{%- comment -%}
Expose optional gift product variant id (Soft Winter Jacket) to JS if configured in section settings.
This prevents hardcoding and avoids 422 errors when the ID is missing.
{%- endcomment -%}
{%- if section.settings.gift_product != blank -%}
  {%- assign gift_prod = all_products[section.settings.gift_product] -%}
  <script>
    // Merge section-provided gift info without overwriting existing global values
    window.GIFT_PRODUCT = (function (gp) {
      gp = gp || {};
      gp.title = gp.title || {{ gift_prod.title | json }};
      gp.variantId = gp.variantId || {{ gift_prod.selected_or_first_available_variant.id | json }};
      gp.handle = gp.handle || {{ gift_prod.handle | json }};
      // Allow explicit override via section setting if provided
      gp.variantId = gp.variantId || {{ section.settings.gift_variant_id | json }};
      return gp;
    })(window.GIFT_PRODUCT);
  </script>
{%- else -%}
  <script>
    // Fallback: only set missing fields; do NOT null-out an existing variantId
    window.GIFT_PRODUCT = (function (gp) {
      gp = gp || {};
      gp.title = gp.title || 'Soft Winter Jacket';
      gp.handle = gp.handle || {{ section.settings.gift_product_handle | json }};
      // Optional explicit override if handle is not reliable
      gp.variantId = gp.variantId || {{ section.settings.gift_variant_id | json }};
      return gp;
    })(window.GIFT_PRODUCT);
  </script>
{%- endif -%}

<!-- Quick View Modal -->
<div id="quick-view-modal" class="quick-view-modal">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close" id="modal-close">&times;</button>
    <div class="modal-body">
      <div class="product-image">
        <img id="modal-product-image" src="" alt="" />
      </div>
      <div class="product-details">
        <h2 id="modal-product-title"></h2>
        <div class="product-price" id="modal-product-price"></div>
        <div class="product-description" id="modal-product-description"></div>
        
        <form class="product-form" id="quick-view-form">
          <input type="hidden" id="modal-product-id" name="id" value="">
          
          <!-- Color Selection -->
          <div class="form-group">
            <label>Color</label>
            <div class="color-options" id="color-options">
              <button type="button" class="color-btn active" data-color="grey">
                <span>Grey</span>
              </button>
              <button type="button" class="color-btn" data-color="black">
                <span>Black</span>
              </button>
            </div>
          </div>
          
          <!-- Size Selection -->
          <div class="form-group">
            <label>Size</label>
            <select class="size-select" id="size-select">
              <option value="">Choose your size</option>
              <option value="xs">XS</option>
              <option value="s">S</option>
              <option value="m">M</option>
              <option value="l">L</option>
              <option value="xl">XL</option>
              <option value="xxl">XXL</option>
            </select>
          </div>
          
          <!-- Add to Cart Button -->
          <button type="submit" class="add-to-cart-btn" id="add-to-cart-btn">
            <span class="btn-text">ADD TO CART</span>
            <span class="btn-loading" style="display: none;">Adding...</span>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
/* Grid - Reduced sizes for better aesthetics */
.custom-grid .grid { 
  display: grid; 
  grid-template-columns: repeat(2, 1fr); 
  gap: 12px; 
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 16px;
}
@media (min-width: 768px){
  .custom-grid .grid { 
    grid-template-columns: repeat(3, 1fr); 
    gap: 16px; 
  }
}

/* Card - Reduced size and improved styling */
.card { 
  border: 1px solid rgba(0,0,0,.08); 
  border-radius: 8px; 
  overflow: hidden; 
  position: relative; 
  transition: transform .25s ease, box-shadow .25s ease;
  background: #fff;
}
.card:hover { 
  transform: translateY(-2px); 
  box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

/* Image + overlay - Optimized for smaller cards */
.card-media { 
  position: relative; 
  display: block; 
  overflow: hidden; 
  aspect-ratio: 3/4;
}
.card-media img { 
  width: 100%; 
  height: 100%;
  object-fit: cover;
  transition: transform .3s ease; 
}
.card:hover img { transform: scale(1.05); }

.hover-overlay { 
  position: absolute; 
  inset: 0; 
  background: rgba(0,0,0,.7); 
  display: flex; 
  align-items: center; 
  justify-content: center; 
  opacity: 0; 
  transition: opacity .3s ease; 
  color: #fff;
  padding: 16px;
  text-align: center;
}
.card:hover .hover-overlay { opacity: 1; }

.hover-info { max-width: 90%; }
.card-title { font-size: 16px; margin: 0 0 6px; font-weight: 600; }
.card-price { font-weight: 700; margin-bottom: 6px; font-size: 14px; }
.card-desc { font-size: 12px; opacity: .9; margin-bottom: 12px; line-height: 1.4; }

/* Quick View Button */
.quick-view-btn {
  background: rgba(255,255,255,0.95);
  color: #000;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}
.quick-view-btn:hover {
  background: #fff;
  transform: translateY(-1px);
}

/* Placeholder */
.placeholder { 
  border: 1px dashed rgba(0,0,0,.2); 
  border-radius: 8px; 
  padding: 30px; 
  text-align:center; 
  color: #666; 
  font-size: 14px;
}

/* Quick View Modal */
.quick-view-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  display: none;
  align-items: center;
  justify-content: center;
}

.quick-view-modal.active {
  display: flex;
}

.modal-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(4px);
}

.modal-content {
  position: relative;
  background: #fff;
  border-radius: 12px;
  max-width: 700px;
  width: 90%;
  max-height: 90vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0,0,0,0.3);
}

.modal-close {
  position: absolute;
  top: 16px;
  right: 16px;
  background: none;
  border: none;
  font-size: 24px;
  color: #666;
  cursor: pointer;
  z-index: 10;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.3s ease;
}

.modal-close:hover {
  background: rgba(0,0,0,0.1);
}

.modal-body {
  display: flex;
  min-height: 450px;
}

.product-image {
  flex: 1;
  position: relative;
  overflow: hidden;
}

.product-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.product-details {
  flex: 1;
  padding: 32px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.product-details h2 {
  font-size: 22px;
  font-weight: 600;
  margin: 0 0 12px 0;
  color: #000;
}

.product-price {
  font-size: 18px;
  font-weight: 700;
  margin-bottom: 16px;
  color: #000;
}

.product-description {
  font-size: 14px;
  line-height: 1.5;
  color: #666;
  margin-bottom: 24px;
}

/* Form Styles */
.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  font-size: 14px;
  font-weight: 600;
  margin-bottom: 8px;
  color: #000;
}

/* Color Options */
.color-options {
  display: flex;
  gap: 8px;
}

.color-btn {
  flex: 1;
  padding: 10px 14px;
  border: 1px solid #ddd;
  background: #fff;
  color: #000;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
}

.color-btn.active {
  background: #000;
  color: #fff;
  border-color: #000;
}

.color-btn:not(.active):hover {
  background: #f5f5f5;
}

/* Size Select */
.size-select {
  width: 100%;
  padding: 10px 14px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 13px;
  background: #fff;
  color: #000;
  cursor: pointer;
}

.size-select:focus {
  outline: none;
  border-color: #000;
}

/* Add to Cart Button */
.add-to-cart-btn {
  width: 100%;
  padding: 14px 20px;
  background: #000;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  transition: all 0.3s ease;
  margin-top: 16px;
  position: relative;
  overflow: hidden;
}

.add-to-cart-btn::before {
  content: "";
  position: absolute;
  inset: 0;
  background: #ffd400;
  transform: translateX(-100%);
  transition: transform 0.35s ease;
  z-index: 0;
}

.add-to-cart-btn:hover:not(:disabled)::before {
  transform: translateX(0);
}

.add-to-cart-btn:hover:not(:disabled) {
  transform: translateY(-1px);
  color: #000;
}

.add-to-cart-btn .btn-text,
.add-to-cart-btn svg {
  position: relative;
  z-index: 1;
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
  transform: none;
}

.add-to-cart-btn svg {
  transition: transform 0.3s ease;
}

.add-to-cart-btn:hover:not(:disabled) svg {
  transform: translateX(4px);
}

/* Loading state */
.btn-loading {
  display: none;
}

.add-to-cart-btn.loading .btn-text {
  display: none;
}

.add-to-cart-btn.loading .btn-loading {
  display: inline;
}

/* Responsive Design */
@media (max-width: 768px) {
  .modal-body {
    flex-direction: column;
  }
  
  .product-image {
    height: 250px;
  }
  
  .product-details {
    padding: 20px;
  }
  
  .modal-content {
    width: 95%;
    max-height: 95vh;
  }
  
  .custom-grid .grid {
    gap: 10px;
    padding: 0 12px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Modal elements
  const modal = document.getElementById('quick-view-modal');
  const modalClose = document.getElementById('modal-close');
  const modalOverlay = document.querySelector('.modal-overlay');
  const quickViewBtns = document.querySelectorAll('.quick-view-btn');
  // Note: color buttons are rebuilt dynamically per product
  const quickViewForm = document.getElementById('quick-view-form');
  const addToCartBtn = document.getElementById('add-to-cart-btn');

  // Product data storage for currently previewed product (from /products/{handle}.js)
  let currentProductData = null;

  // Gift product info injected from Liquid (see tag above). Will be null if not configured.
  const GIFT_PRODUCT = (typeof window !== 'undefined' && window.GIFT_PRODUCT) ? window.GIFT_PRODUCT : { title: null, variantId: null };

  // Open modal functionality
  quickViewBtns.forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const productId = this.getAttribute('data-product-id');
      const productHandle = this.getAttribute('data-product-handle');
      
      // Load product data
      loadProductData(productHandle);
      
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    });
  });

  // Close modal functionality
  function closeModal() {
    modal.classList.remove('active');
    document.body.style.overflow = '';
    // Reset form
    quickViewForm.reset();
    colorBtns[0].classList.add('active');
    colorBtns[1].classList.remove('active');
    addToCartBtn.classList.remove('loading');
  }

  modalClose.addEventListener('click', closeModal);
  modalOverlay.addEventListener('click', closeModal);

  function bindColorButtons(container) {
    const buttons = container.querySelectorAll('.color-btn');
    buttons.forEach(btn => {
      btn.addEventListener('click', function() {
        buttons.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
      });
    });
  }

  // Load product data from Shopify API
  function loadProductData(productHandle) {
    // Show loading state
    addToCartBtn.classList.add('loading');
    
    // Fetch product data from Shopify API
    fetch(`/products/${productHandle}.js`)
      .then(response => response.json())
      .then(product => {
        currentProductData = product;
        
        // Update modal content
        document.getElementById('modal-product-title').textContent = product.title;
        document.getElementById('modal-product-price').textContent = formatPrice(product.price);
        document.getElementById('modal-product-description').textContent = product.description || 'No description available';
        document.getElementById('modal-product-image').src = product.featured_image || 'https://via.placeholder.com/400x500/f0f0f0/666?text=Product+Image';
        document.getElementById('modal-product-image').alt = product.title;
        // Default the hidden input strictly to a variant id (never the product id)
        const firstVariant = (product.variants || []).find(v => v.available) || (product.variants || [])[0];
        document.getElementById('modal-product-id').value = firstVariant ? String(firstVariant.id) : '';
        
        // Dynamically build Color and Size options based on product options/variants
        try {
          const colorOptionsEl = document.getElementById('color-options');
          const sizeSelectEl = document.getElementById('size-select');
          if (colorOptionsEl && sizeSelectEl && Array.isArray(product.options) && Array.isArray(product.variants)) {
            // Determine indices for Color and Size
            const optionNames = product.options.map(o => (o && o.name ? String(o.name).toLowerCase() : ''));
            const colorIdx = Math.max(0, optionNames.findIndex(n => n === 'color' || n === 'colour'));
            const sizeIdx = Math.max(0, optionNames.findIndex(n => n === 'size'));
            
            const getVariantOption = (variant, idx) => {
              if (idx === 0) return variant.option1;
              if (idx === 1) return variant.option2;
              if (idx === 2) return variant.option3;
              return undefined;
            };
            
            // Unique values preserving order
            const colors = [];
            const sizes = [];
            for (const v of product.variants) {
              const c = getVariantOption(v, colorIdx);
              const s = getVariantOption(v, sizeIdx);
              if (c && !colors.includes(c)) colors.push(c);
              if (s && !sizes.includes(s)) sizes.push(s);
            }
            
            // Build color buttons
            colorOptionsEl.innerHTML = '';
            colors.forEach((c, i) => {
              const btn = document.createElement('button');
              btn.type = 'button';
              btn.className = 'color-btn' + (i === 0 ? ' active' : '');
              btn.setAttribute('data-color', String(c).toLowerCase());
              btn.innerHTML = `<span>${c}</span>`;
              colorOptionsEl.appendChild(btn);
            });
            bindColorButtons(colorOptionsEl);
            
            // Build size select
            sizeSelectEl.innerHTML = '';
            const placeholder = document.createElement('option');
            placeholder.value = '';
            placeholder.textContent = 'Choose your size';
            sizeSelectEl.appendChild(placeholder);
            sizes.forEach(s => {
              const opt = document.createElement('option');
              opt.value = String(s).toLowerCase();
              opt.textContent = s;
              sizeSelectEl.appendChild(opt);
            });
          }
        } catch (err) {
          console.warn('Failed to build dynamic options:', err);
        }
        
        // Remove loading state
        addToCartBtn.classList.remove('loading');
      })
      .catch(error => {
        console.error('Error loading product data:', error);
        // Fallback to placeholder data
        const productData = {
          title: 'Product Title',
          price: '0.00',
          description: 'Product description not available.',
          image: 'https://via.placeholder.com/400x500/f0f0f0/666?text=Product+Image',
          id: productHandle
        };
        
        document.getElementById('modal-product-title').textContent = productData.title;
        document.getElementById('modal-product-price').textContent = productData.price;
        document.getElementById('modal-product-description').textContent = productData.description;
        document.getElementById('modal-product-image').src = productData.image;
        document.getElementById('modal-product-image').alt = productData.title;
        // Do not set a non-variant id; keep empty so submit validation catches it
        document.getElementById('modal-product-id').value = '';
        
        addToCartBtn.classList.remove('loading');
      });
  }

  // Format price for display
  function formatPrice(price) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price / 100);
  }

  // Add to cart functionality using Shopify AJAX API
  function addToCart(items) {
    return fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'same-origin',
      body: JSON.stringify({ items: items })
    });
  }

  // Fetch first available variant ID for a product handle
  function fetchFirstAvailableVariantIdByHandle(handle) {
    if (!handle) return Promise.resolve(null);
    const encoded = encodeURIComponent(handle);
    console.log('[QuickView] Resolving gift by handle:', handle, 'encoded:', encoded);
    return fetch(`/products/${encoded}.js`, { credentials: 'same-origin' })
      .then(r => r.json())
      .then(p => {
        const v = (p.variants || []).find(v => v.available) || (p.variants || [])[0];
        const vid = v ? String(v.id) : null;
        console.log('[QuickView] Resolved gift variant id from handle:', handle, '=>', vid);
        return vid;
      })
      .catch(() => null);
  }

  // Verify a given gift variant is available for the gift handle; if not, return first available
  function ensureAvailableGiftVariantId(candidateId, handle) {
    const idStr = candidateId != null ? String(candidateId) : null;
    if (!handle) return Promise.resolve(idStr);
    const encoded = encodeURIComponent(handle);
    return fetch(`/products/${encoded}.js`)
      .then(r => r.json())
      .then(p => {
        const variants = Array.isArray(p.variants) ? p.variants : [];
        if (idStr) {
          const match = variants.find(v => String(v.id) === idStr);
          if (match && match.available) return idStr;
        }
        const available = variants.find(v => v.available);
        return available ? String(available.id) : null;
      })
      .catch(() => idStr);
  }

  // Find variant ID that matches selected Color + Size from the loaded product JSON
  // This function tries multiple matching strategies to cope with different option naming and values (e.g., M vs Medium)
  function getVariantIdForSelection(product, selectedColor, selectedSize) {
    if (!product || !Array.isArray(product.variants)) return null;

    // Normalize helper
    const norm = (v) => (v || '').toString().trim().toLowerCase();

    // Try to match with exact and fallback fuzzy match
    const colorWanted = norm(selectedColor);
    const sizeWanted = norm(selectedSize);

    // Some themes store sizes like "Medium"; map short letters to likely names to broaden match
    const sizeAliases = {
      'xs': ['xs', 'x-small', 'extra small'],
      's': ['s', 'small'],
      'm': ['m', 'medium'],
      'l': ['l', 'large'],
      'xl': ['xl', 'x-large', 'extra large'],
      'xxl': ['xxl', '2xl', 'xx-large', 'extra extra large']
    };
    const sizeCandidates = sizeAliases[sizeWanted] || [sizeWanted];

    // Iterate variants and try to match across up to 3 options
    for (const variant of product.variants) {
      const o1 = norm(variant.option1);
      const o2 = norm(variant.option2);
      const o3 = norm(variant.option3);

      const options = [o1, o2, o3].filter(Boolean);

      const hasColor = options.some(o => o === colorWanted || (colorWanted && o.startsWith(colorWanted)));
      const hasSize = options.some(o => sizeCandidates.includes(o) || sizeCandidates.some(s => o.startsWith(s)));

      if (hasColor && hasSize && variant.available) {
        return variant.id;
      }
    }

    // Fallback: return first available variant
    const firstAvailable = product.variants.find(v => v.available);
    return firstAvailable ? firstAvailable.id : (product.variants[0] ? product.variants[0].id : null);
  }

  // Check if Soft Winter Jacket should be auto-added
  function shouldAutoAddWinterJacket(color, size) {
    const cRaw = (color || '').toString().trim().toLowerCase();
    const sRaw = (size || '').toString().trim().toLowerCase();
    // Normalize simple aliases
    const containsBlack = cRaw.includes('black');
    const sizeAliases = new Set(['m', 'md', 'med', 'medium']);
    const isMedium = sizeAliases.has(sRaw) || sRaw.includes('medium');
    return containsBlack && isMedium;
  }

  // Form submission with proper cart functionality
  quickViewForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Ensure product data is loaded
    if (!currentProductData || !Array.isArray(currentProductData.variants) || currentProductData.variants.length === 0) {
      alert('Please wait, product is still loading.');
      return;
    }
    
    const selectedColor = document.querySelector('.color-btn.active').getAttribute('data-color');
    const selectedSize = document.getElementById('size-select').value;
    
    if (!selectedSize) {
      alert('Please select a size');
      return;
    }
    
    // Show loading state
    addToCartBtn.classList.add('loading');
    addToCartBtn.disabled = true;
    
    // Resolve the correct variant ID for selected options to avoid adding wrong/invalid variant
    const resolvedVariantId = getVariantIdForSelection(currentProductData, selectedColor, selectedSize) || document.getElementById('modal-product-id').value;
    const variantIdStr = (resolvedVariantId != null) ? String(resolvedVariantId) : '';
    if (!/^[0-9]+$/.test(variantIdStr)) {
      addToCartBtn.classList.remove('loading');
      addToCartBtn.disabled = false;
      alert('Cannot find a matching variant for your selection.');
      return;
    }
    const variantIdNum = Number(variantIdStr);
    console.log('[QuickView] Resolved variant id:', variantIdNum, 'color=', selectedColor, 'size=', selectedSize);
    // Reflect resolved id into the hidden form control so any 3rd-party listeners read the correct value
    const hiddenIdInput = document.getElementById('modal-product-id');
    if (hiddenIdInput) hiddenIdInput.value = String(variantIdStr);

    // Prepare primary item
    const primaryItem = { id: variantIdNum, quantity: 1 };

    // Determine Black/Medium based on actual variant options (more reliable than UI values)
    let computedColor = selectedColor;
    let computedSize = selectedSize;
    try {
      const product = currentProductData;
      const variant = (product && Array.isArray(product.variants)) ? product.variants.find(v => String(v.id) === String(variantIdStr)) : null;
      if (product && variant && Array.isArray(product.options)) {
        const optionNames = product.options.map(o => (o && o.name ? String(o.name).toLowerCase() : ''));
        const colorIdx = Math.max(0, optionNames.findIndex(n => n === 'color' || n === 'colour'));
        const sizeIdx = Math.max(0, optionNames.findIndex(n => n === 'size'));
        const getVariantOption = (v, idx) => {
          if (idx === 0) return v.option1;
          if (idx === 1) return v.option2;
          if (idx === 2) return v.option3;
          return undefined;
        };
        computedColor = getVariantOption(variant, colorIdx) || computedColor;
        computedSize = getVariantOption(variant, sizeIdx) || computedSize;
      }
    } catch (e) {
      console.warn('Failed to compute options from variant:', e);
    }

    // Auto-add Soft Winter Jacket if Black + Medium is selected (using computed options)
    const needGift = shouldAutoAddWinterJacket(computedColor, computedSize);
    console.log('[QuickView] Gift decision:', { selectedColor, selectedSize, computedColor, computedSize, needGift, GIFT_PRODUCT });
    const ensureGiftVariantId = (GIFT_PRODUCT && (GIFT_PRODUCT.variantId || GIFT_PRODUCT.handle))
      ? (GIFT_PRODUCT.variantId ? Promise.resolve(String(GIFT_PRODUCT.variantId)) : fetchFirstAvailableVariantIdByHandle(GIFT_PRODUCT.handle))
      : Promise.resolve(null);

    const addItems = (giftVariantId) => {
      // Step 1: add primary item first
      addToCart([primaryItem])
        .then(response => {
          if (!response.ok) {
            return response.json().then(err => { throw err; });
          }
          return response.json();
        })
        .then(() => {
          // Step 2: optionally add gift in a separate call
          const preCanAddGift = needGift && giftVariantId && /^[0-9]+$/.test(String(giftVariantId));
          console.log('[QuickView] Gift add check (pre-verify):', { preCanAddGift, giftVariantId });
          if (!preCanAddGift) {
            updateCartCount();
            showSuccessMessage(false);
            closeModal();
            return;
          }

          // Ensure gift variant is available for handle (fallback to first available)
          return ensureAvailableGiftVariantId(giftVariantId, (GIFT_PRODUCT && GIFT_PRODUCT.handle))
            .then(verifiedGiftId => {
              if (!verifiedGiftId || !/^[0-9]+$/.test(String(verifiedGiftId))) {
                console.warn('[QuickView] Gift variant not resolvable/available, skipping');
                updateCartCount();
                showSuccessMessage(false);
                closeModal();
                return null;
              }
              const giftIdNum = Number(verifiedGiftId);
              // Check if gift is already in cart to avoid duplicates
              return fetch('/cart.js')
                .then(r => r.ok ? r.json() : { items: [] })
                .then(cart => ({ cart, giftIdNum }));
            })
            .then(ctx => {
              if (!ctx) return;
              const { cart, giftIdNum } = ctx;
              const exists = Array.isArray(cart.items) && cart.items.some(it => Number(it.id) === giftIdNum);
              if (exists) {
                updateCartCount();
                showSuccessMessage(false);
                closeModal();
                return;
              }
              // Add gift as separate call
              return addToCart([
                {
                  id: giftIdNum,
                  quantity: 1,
                  properties: {
                    'Auto-added': 'Yes',
                    'Reason': 'Black + Medium variant selected'
                  }
                }
              ])
                .then(res => {
                  if (!res.ok) {
                    return res.json().then(err => { throw err; });
                  }
                  return res.json();
                })
                .then(() => {
                  updateCartCount();
                  showSuccessMessage(true);
                  closeModal();
                });
            })
            .catch(err => {
              console.error('Gift add failed:', err && (err.description || err.message) ? (err.description || err.message) : err);
              // Still report success for the main item
              updateCartCount();
              showSuccessMessage(false);
              closeModal();
            });
        })
        .catch(error => {
          console.error('Primary add failed:', error);
          // Only alert if Shopify provides a clear error description.
          if (error && error.description) {
            alert(error.description);
          } else {
            // In cases where the add actually succeeded but parsing/response was odd, treat as soft-success.
            try { updateCartCount(); } catch (_) {}
            try { showSuccessMessage(false); } catch (_) {}
            try { closeModal(); } catch (_) {}
          }
        })
        .finally(() => {
          addToCartBtn.classList.remove('loading');
          addToCartBtn.disabled = false;
        });
    };

    ensureGiftVariantId.then(addItems);
  });

  // Update cart count in header (if cart count element exists)
  function updateCartCount() {
    // Try multiple common selectors to be robust across themes
    const cartCountElements = document.querySelectorAll('.cart-count, .cart-count-bubble, .cart-count-bubble .count, [data-cart-count]');
    if (cartCountElements.length > 0) {
      // Fetch current cart and update count
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          cartCountElements.forEach(element => {
            // If element has a nested .count (e.g., Dawn), update that
            const innerCount = element.querySelector && element.querySelector('.count');
            if (innerCount) {
              innerCount.textContent = cart.item_count;
              element.style.display = cart.item_count > 0 ? 'block' : 'none';
            } else {
              element.textContent = cart.item_count;
              element.style.display = cart.item_count > 0 ? 'block' : 'none';
            }
          });
        })
        .catch(error => console.error('Error updating cart count:', error));
    }
  }

  // Show success message
  function showSuccessMessage(addedGift) {
    // Create and show a success notification
    const notification = document.createElement('div');
    notification.className = 'cart-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span>✓ Product added to cart successfully!</span>
        ${addedGift ? '<span style="opacity:.9">(+ Soft Winter Jacket added)</span>' : ''}
        <button class="notification-close">&times;</button>
      </div>
    `;
    
    // Add styles
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #4CAF50;
      color: white;
      padding: 12px 20px;
      border-radius: 4px;
      z-index: 10000;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      animation: slideIn 0.3s ease;
    `;
    
    // Add animation styles
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      .notification-content {
        display: flex;
        align-items: center;
        gap: 10px;
      }
      .notification-close {
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
    
    // Manual close
    notification.querySelector('.notification-close').addEventListener('click', () => {
      notification.remove();
    });
  }

  // Close modal on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modal.classList.contains('active')) {
      closeModal();
    }
  });
});
</script>

{% schema %}
{
  "name": "Product Grid 6",
  "settings": [
    {
      "type": "product",
      "id": "gift_product",
      "label": "Gift product (auto-add when Black + Medium)",
      "info": "Select 'Soft Winter Jacket' to auto-add when Black + Medium is chosen. Optional."
    },
    {
      "type": "text",
      "id": "gift_product_handle",
      "label": "Gift product handle (fallback)",
      "info": "If product above is not set, provide handle e.g. soft-winter-jacket"
    },
    {
      "type": "text",
      "id": "gift_variant_id",
      "label": "Gift variant ID override (optional)",
      "info": "Explicit variant ID to add as gift. Use numbers only."
    }
  ],
  "blocks": [
    {
      "type": "product_1",
      "name": "Product 1",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_2",
      "name": "Product 2",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_3",
      "name": "Product 3",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_4",
      "name": "Product 4",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_5",
      "name": "Product 5",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_6",
      "name": "Product 6",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid 6",
      "category": "Custom"
    }
  ]
}
{% endschema %}

