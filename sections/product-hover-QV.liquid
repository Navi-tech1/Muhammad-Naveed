<section id="section-{{ section.id }}" class="custom-grid">
  <div class="grid">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign prod = all_products[block.settings.product] %}
        <div class="card" {{ block.shopify_attributes }}>
          <a href="{{ prod.url }}" class="card-media" aria-label="{{ prod.title }}">
            {% if prod.featured_image %}
              <img src="{{ prod.featured_image | img_url: '600x' }}" alt="{{ prod.title }}" loading="lazy" />
            {% endif %}
          </a>
          <div class="hover-overlay">
            <div class="hover-info">
              <h3 class="card-title">{{ prod.title }}</h3>
              <div class="card-price">
                {% if prod.price_varies %}From {{ prod.price_min | money }}{% else %}{{ prod.price | money }}{% endif %}
              </div>
              <button class="quick-btn" data-handle="{{ prod.handle }}" aria-label="Quick view {{ prod.title }}">Quick View</button>
            </div>
          </div>
        </div>
      {% else %}
        <div class="placeholder">Select a product</div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- Quick View Modal -->
<div class="quickview-backdrop" data-qv-root hidden>
  <div class="quickview-card" role="dialog" aria-modal="true" aria-label="Quick view">
    <button class="qv-close" aria-label="Close">×</button>
    <div class="qv-content">
      <div class="qv-media"></div>
      <div class="qv-info">
        <h3 class="qv-title"></h3>
        <div class="qv-price"></div>
        <div class="qv-desc"></div>

        <form class="qv-form">
          <div class="qv-options"></div>
          <input type="hidden" name="id" class="qv-variant-id" />
          <button type="submit" class="qv-add">
            ADD TO CART <span class="arrow">→</span>
          </button>
        </form>

        <div class="qv-status" role="status" aria-live="polite"></div>
      </div>
    </div>
  </div>
</div>

<style>
/* Grid */
.custom-grid .grid { display:grid; grid-template-columns:repeat(2,1fr); gap:16px; }
@media (min-width:768px){ .custom-grid .grid { grid-template-columns:repeat(3,1fr); gap:20px; } }
.card { border:1px solid rgba(0,0,0,.08); border-radius:12px; overflow:hidden; position:relative; transition:transform .25s ease; }
.card:hover { transform:translateY(-4px); }
.card-media img { width:100%; height:auto; display:block; transition:transform .3s ease; }
.card:hover img { transform:scale(1.05); }

/* Overlay */
.hover-overlay { position:absolute; inset:0; background:rgba(0,0,0,.6); color:#fff; display:flex; align-items:center; justify-content:center; opacity:0; transition:opacity .3s ease; text-align:center; padding:16px; }
.card:hover .hover-overlay { opacity:1; }
.card-title { font-size:18px; margin:0 0 8px; color:#fff; }
.card-price { font-weight:700; margin-bottom:8px; color:#fff; }
.quick-btn { background:#fff; color:#000; padding:8px 14px; border:none; border-radius:6px; cursor:pointer; font-weight:600; }

/* Quick View Modal */
.quickview-backdrop { position:fixed; inset:0; background:rgba(0,0,0,.6); display:flex; align-items:center; justify-content:center; z-index:1000; opacity:0; pointer-events:none; transition:opacity .25s ease; }
.quickview-backdrop.active { opacity:1; pointer-events:auto; }
.quickview-card { background:#fff; border-radius:12px; max-width:720px; width:92vw; padding:20px; position:relative; transform:translateY(24px); opacity:0; transition:all .25s ease; }
.quickview-backdrop.active .quickview-card { transform:translateY(0); opacity:1; }
.qv-close { position:absolute; top:12px; right:12px; border:none; background:#fff; border-radius:50%; width:32px; height:32px; cursor:pointer; font-size:18px; }

/* Modal content */
.qv-content { display:grid; gap:20px; }
@media(min-width:768px){ .qv-content { grid-template-columns:1fr 1fr; gap:24px; } }
.qv-media img { width:100%; border-radius:8px; display:block; }
.qv-title { font-size:20px; margin:0 0 6px; }
.qv-price { font-weight:700; margin-bottom:10px; }
.qv-desc { font-size:14px; margin-bottom:14px; opacity:.9; }

/* Options */
.qv-options { margin-bottom:14px; }
.qv-options label { display:block; font-size:12px; margin:8px 0 4px; color:#333; text-align:left; }
.qv-options .color-blocks { display:flex; gap:8px; }
.qv-options .color-block { flex:1; padding:10px; border:1px solid #ddd; text-align:center; cursor:pointer; }
.qv-options .color-block.active { border:2px solid #000; background:#000; color:#fff; }
.qv-options select { width:100%; padding:10px; border:1px solid #ddd; border-radius:4px; background:#fff; cursor:pointer; }

/* Add to cart */
.qv-add { background:#000; color:#fff; border:none; padding:12px 16px; border-radius:4px; cursor:pointer; font-weight:600; width:100%; text-align:center; }
.qv-add .arrow { margin-left:8px; font-size:16px; }
.qv-status { margin-top:10px; font-size:14px; color:green; text-align:left; }
</style>

<script>
function formatMoney(cents) {
  return (cents / 100).toLocaleString(undefined, { 
    style: "currency", 
    currency: "{{ shop.currency }}" 
  });
}

function buildOptions(product, currentVariant){
  OPTS.innerHTML = '';

  // Color options as blocks
  if (product.options.includes("Color")) {
    const colors = [...new Set(product.variants.map(v => v.option1))];
    const wrap = document.createElement('div');
    wrap.className = "color-blocks";
    colors.forEach(c => {
      const div = document.createElement('div');
      div.className = "color-block";
      div.textContent = c;
      div.onclick = ()=> {
        wrap.querySelectorAll('.color-block').forEach(el=>el.classList.remove('active'));
        div.classList.add('active');
        updateVariant();
      };
      wrap.appendChild(div);
    });
    const label = document.createElement('label'); label.textContent = "Color";
    OPTS.append(label, wrap);
  }

  // Size as dropdown
  if (product.options.includes("Size")) {
    const sizes = [...new Set(product.variants.map(v => v.option2))];
    const sel = document.createElement('select');
    sel.append(new Option("Choose your size", ""));
    sizes.forEach(s => sel.append(new Option(s, s)));
    sel.onchange = updateVariant;
    const label = document.createElement('label'); label.textContent = "Size";
    OPTS.append(label, sel);
  }

  function updateVariant(){
    const color = OPTS.querySelector('.color-block.active')?.textContent;
    const size  = OPTS.querySelector('select')?.value;
    const found = product.variants.find(v =>
      (!color || v.option1===color) && (!size || v.option2===size)
    );
    if (found){
      VAR_INPUT.value = found.id;
      PRICE.textContent = formatMoney(found.price);
    } else {
      VAR_INPUT.value = '';
    }
  }
}

</script>

{% schema %}
{
  "name": "Prod Grid QV",
  "settings": [],
  "blocks": [
    { "type": "p1", "name": "Product 1", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p2", "name": "Product 2", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p3", "name": "Product 3", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p4", "name": "Product 4", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p5", "name": "Product 5", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p6", "name": "Product 6", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] }
  ],
  "max_blocks": 6,
  "presets": [ { "name": "Prod Grid QV", "category": "Custom" } ]
}
{% endschema %}
