{% comment %}
Product Grid QV — Robust full section (paste-ready)
- Document-level delegation so Quick View always responds
- Color blocks + Size select (placeholder "Choose your size")
- AJAX Add to Cart; requires size when present
- Bundle rule: Black + Medium -> add Soft Winter Jacket (9843130663219) once
- Cart count refresh
{% endcomment %}

<section id="section-{{ section.id }}" class="custom-grid">
  <div class="grid">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign prod = all_products[block.settings.product] %}
        <div class="card" {{ block.shopify_attributes }}>
          <a href="{{ prod.url }}" class="card-media" aria-label="{{ prod.title }}">
            {% if prod.featured_image %}
              <img src="{{ prod.featured_image | img_url: '600x' }}" alt="{{ prod.title }}" loading="lazy" />
            {% endif %}
          </a>

          <div class="hover-overlay">
            <div class="hover-info">
              <h3 class="card-title">{{ prod.title }}</h3>
              <div class="card-price">
                {% if prod.price_varies %}From {{ prod.price_min | money }}{% else %}{{ prod.price | money }}{% endif %}
              </div>
              <button class="quick-btn" data-handle="{{ prod.handle }}" aria-label="Quick view {{ prod.title }}">Quick View</button>
            </div>
          </div>
        </div>
      {% else %}
        <div class="placeholder">Select a product</div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- Quick View Modal unique per section -->
<div class="quickview-backdrop" id="qv-root-{{ section.id }}" hidden>
  <div class="quickview-card" role="dialog" aria-modal="true" aria-label="Quick view">
    <button class="qv-close" aria-label="Close">×</button>
    <div class="qv-content">
      <div class="qv-media"></div>
      <div class="qv-info">
        <h3 class="qv-title"></h3>
        <div class="qv-price"></div>
        <div class="qv-desc"></div>

        <form class="qv-form">
          <div class="qv-options"></div>
          <input type="hidden" name="id" class="qv-variant-id" />
          <button type="submit" class="qv-add">
            ADD TO CART <span class="arrow">→</span>
          </button>
        </form>

        <div class="qv-status" role="status" aria-live="polite"></div>
      </div>
    </div>
  </div>
</div>

<style>
/* Grid & cards */
.custom-grid .grid { display:grid; grid-template-columns:repeat(2,1fr); gap:16px; }
@media (min-width:768px){ .custom-grid .grid { grid-template-columns:repeat(3,1fr); gap:20px; } }
.card { border:1px solid rgba(0,0,0,.08); border-radius:12px; overflow:hidden; position:relative; transition:transform .25s ease; }
.card:hover { transform:translateY(-4px); }
.card-media img { width:100%; height:auto; display:block; transition:transform .3s ease; }
.card:hover img { transform:scale(1.05); }

/* Hover overlay */
.hover-overlay { position:absolute; inset:0; background:rgba(0,0,0,.6); color:#fff; display:flex; align-items:center; justify-content:center; opacity:0; transition:opacity .3s ease; text-align:center; padding:16px; }
.card:hover .hover-overlay { opacity:1; }
.card-title { font-size:18px; margin:0 0 8px; color:#fff; } /* white title */
.card-price { font-weight:700; margin-bottom:8px; color:#fff; }
.quick-btn { background:#fff; color:#000; padding:8px 14px; border:none; border-radius:6px; cursor:pointer; font-weight:600; }

/* Quick View Modal */
.quickview-backdrop { position:fixed; inset:0; background:rgba(0,0,0,.6); display:flex; align-items:center; justify-content:center; z-index:1000; opacity:0; pointer-events:none; transition:opacity .25s ease; }
.quickview-backdrop.active { opacity:1; pointer-events:auto; }
.quickview-card { background:#fff; border-radius:12px; max-width:820px; width:94vw; padding:20px; position:relative; transform:translateY(24px); opacity:0; transition:all .25s ease; box-shadow: 0 8px 24px rgba(0,0,0,.15); }
.quickview-backdrop.active .quickview-card { transform:translateY(0); opacity:1; }
.qv-close { position:absolute; top:12px; right:12px; border:none; background:#fff; border-radius:50%; width:32px; height:32px; cursor:pointer; font-size:18px; }

/* Modal content layout */
.qv-content { display:grid; gap:20px; }
@media(min-width:768px){ .qv-content { grid-template-columns: 1fr 1fr; gap:24px; } }
.qv-media img { width:100%; border-radius:8px; display:block; }
.qv-title { font-size:20px; margin:0 0 6px; }
.qv-price { font-weight:700; margin-bottom:10px; }
.qv-desc { font-size:14px; margin-bottom:14px; opacity:.95; }

/* Options UI */
.qv-options { margin-bottom:14px; }
.qv-options label { display:block; font-size:12px; margin:8px 0 4px; color:#333; text-align:left; }
.color-blocks { display:flex; gap:8px; margin-bottom:10px; }
.color-block { flex:1; padding:10px; border:1px solid #ddd; text-align:center; cursor:pointer; user-select:none; border-radius:4px; background:#fff; }
.color-block.active { border:2px solid #000; background:#000; color:#fff; }
.qv-options select { width:100%; padding:10px; border:1px solid #ddd; border-radius:4px; background:#fff; cursor:pointer; }

/* Add to cart */
.qv-add { background:#000; color:#fff; border:none; padding:12px 16px; border-radius:4px; cursor:pointer; font-weight:600; width:100%; text-align:center; }
.qv-add .arrow { margin-left:8px; font-size:16px; }
.qv-status { margin-top:10px; font-size:14px; color:green; text-align:left; }

/* Placeholder */
.placeholder { border:1px dashed rgba(0,0,0,.2); border-radius:12px; padding:40px; text-align:center; color:#666; }
</style>

<script>
(function(){
  try {
    const SECTION_ID = 'section-{{ section.id }}';
    const ROOT_ID    = 'qv-root-{{ section.id }}';
    const sectionEl  = document.getElementById(SECTION_ID);
    const ROOT       = document.getElementById(ROOT_ID);
    if (!sectionEl || !ROOT) {
      console.warn('Prod Grid QV: Section or root modal not found (ids):', SECTION_ID, ROOT_ID);
      return;
    }

    const CARD = ROOT.querySelector('.quickview-card');
    const CLOSE = ROOT.querySelector('.qv-close');
    const MEDIA = ROOT.querySelector('.qv-media');
    const TITLE = ROOT.querySelector('.qv-title');
    const PRICE = ROOT.querySelector('.qv-price');
    const DESC  = ROOT.querySelector('.qv-desc');
    const OPTS  = ROOT.querySelector('.qv-options');
    const VAR_INPUT = ROOT.querySelector('.qv-variant-id');
    const STATUS = ROOT.querySelector('.qv-status');
    const FORM = ROOT.querySelector('.qv-form');

    const BASE = (window.Shopify && Shopify.routes && Shopify.routes.root) || "{{ routes.root_url }}";
    const JACKET_VARIANT_ID = 9843130663219; // Soft Winter Jacket Black/Medium
    const CURRENCY = "{{ shop.currency }}";

    // helpers
    function showModal(){ ROOT.hidden = false; requestAnimationFrame(()=> ROOT.classList.add('active')); }
    function hideModal(){ ROOT.classList.remove('active'); setTimeout(()=> (ROOT.hidden = true), 250); }

    function formatMoney(cents){
      try {
        cents = Number(cents);
        if (isNaN(cents)) cents = 0;
        return (cents/100).toLocaleString(undefined, { style: 'currency', currency: CURRENCY });
      } catch(e) {
        return (cents/100).toFixed(2) + ' ' + CURRENCY;
      }
    }

    function getJSON(url, opts){
      return fetch(url, Object.assign({ headers:{ 'Accept':'application/json' } }, opts || {}))
        .then(async r => {
          if (!r.ok) {
            const txt = await r.text().catch(()=> '');
            throw new Error(txt || ('HTTP ' + r.status));
          }
          return r.json();
        });
    }

    function refreshCartCount(){
      getJSON(BASE + 'cart.js').then(cart => {
        // common selectors used by many themes
        const bubble = document.querySelector('#cart-icon-bubble .cart-count-bubble, .cart-count-bubble, [data-cart-count]');
        if (bubble) {
          if (bubble.classList && bubble.classList.contains('cart-count-bubble')) {
            const text = bubble.querySelector('.text') || bubble;
            text.textContent = cart.item_count;
            bubble.hidden = cart.item_count <= 0;
          } else {
            bubble.textContent = cart.item_count;
          }
        }
      }).catch(()=>{ /* ignore */ });
    }

    // Build options UI (color blocks + size select). product is /products/{handle}.js object
    function buildOptions(product){
      OPTS.innerHTML = '';
      if (!product) return;

      const optNames = product.options || [];
      const colorIndex = optNames.findIndex(n => /color|colour/i.test(n));
      const sizeIndex  = optNames.findIndex(n => /size/i.test(n));

      // Unique values helper
      function uniqueFor(idx){
        const key = 'option' + idx;
        const set = new Set();
        (product.variants || []).forEach(v => { if (v[key]) set.add(v[key]); });
        return Array.from(set);
      }

      // Color blocks
      if (colorIndex !== -1) {
        const label = document.createElement('label'); label.textContent = optNames[colorIndex] || 'Color';
        const wrap = document.createElement('div'); wrap.className = 'color-blocks';
        uniqueFor(colorIndex+1).forEach(val => {
          const b = document.createElement('div');
          b.className = 'color-block';
          b.textContent = val;
          b.dataset.value = val;
          b.addEventListener('click', () => {
            wrap.querySelectorAll('.color-block').forEach(x => x.classList.remove('active'));
            b.classList.add('active');
            updateVariant(product);
          });
          wrap.appendChild(b);
        });
        OPTS.appendChild(label);
        OPTS.appendChild(wrap);
      }

      // Size select (with placeholder)
      if (sizeIndex !== -1) {
        const label = document.createElement('label'); label.textContent = optNames[sizeIndex] || 'Size';
        const sel = document.createElement('select');
        sel.appendChild(new Option('Choose your size', ''));
        uniqueFor(sizeIndex+1).forEach(s => sel.appendChild(new Option(s, s)));
        sel.addEventListener('change', () => updateVariant(product));
        OPTS.appendChild(label);
        OPTS.appendChild(sel);
      }

      // Any remaining options render as selects
      optNames.forEach((name, idx) => {
        if (idx === colorIndex || idx === sizeIndex) return;
        const values = uniqueFor(idx+1);
        if (!values.length) return;
        const label = document.createElement('label'); label.textContent = name;
        const sel = document.createElement('select');
        sel.appendChild(new Option('Choose', ''));
        values.forEach(v => sel.appendChild(new Option(v, v)));
        sel.addEventListener('change', () => updateVariant(product));
        OPTS.appendChild(label);
        OPTS.appendChild(sel);
      });

      // clear variant input initially to force selection (especially size)
      VAR_INPUT.value = '';
      // display base price (min)
      PRICE.textContent = formatMoney(product.price_min || (product.variants && product.variants[0] && product.variants[0].price) || 0);
    }

    function updateVariant(product){
      // Build current selection array by product.options order
      const chosen = [];
      (product.options || []).forEach((name, i) => {
        const idx = i + 1;
        // color
        const colorBlocks = OPTS.querySelectorAll('.color-block');
        if (colorBlocks.length) {
          const active = Array.from(colorBlocks).find(b => b.classList.contains('active'));
          if (active) { chosen.push(active.dataset.value); return; }
        }
        // selects
        const selects = Array.from(OPTS.querySelectorAll('select'));
        // heuristics: first select after its label corresponds to first non-color option encountered
        // find select with previous label text matching name
        let selVal = '';
        for (const s of selects) {
          const lbl = s.previousSibling;
          if (lbl && lbl.textContent === name) {
            selVal = s.value; break;
          }
        }
        chosen.push(selVal || '');
      });

      // Find variant that matches chosen values (empty values act as wildcard)
      const found = (product.variants || []).find(v => {
        return chosen.every((val, j) => {
          if (!val) return true;
          const key = 'option' + (j+1);
          return v[key] === val;
        });
      });

      if (found) {
        VAR_INPUT.value = found.id;
        PRICE.textContent = formatMoney(found.price);
        STATUS.textContent = '';
      } else {
        VAR_INPUT.value = '';
        // keep price at min or fallback
      }
    }

    // Open quick view for a handle
    function openQuickView(handle){
      if (!handle) return;
      console.debug('Prod Grid QV: opening quick view for', handle);
      STATUS.textContent = 'Loading…';
      getJSON(BASE + 'products/' + encodeURIComponent(handle) + '.js')
        .then(product => {
          TITLE.textContent = product.title || '';
          const img = product.images && product.images[0] ? product.images[0] : null;
          MEDIA.innerHTML = img ? '<img src="' + img + '" alt="' + (product.title||'') + '">' : '';
          PRICE.textContent = formatMoney(product.price_min || (product.variants && product.variants[0] && product.variants[0].price) || 0);
          setTimeout(()=> setDescription(product.body_html), 0);

          // Clear any previous selection to force user choice for size
          VAR_INPUT.value = '';

          // build options UI for this product
          buildOptions(product);

          // store product object for updateVariant closures (attach to ROOT)
          ROOT._qv_current_product = product;

          STATUS.textContent = '';
          showModal();
        })
        .catch(err => {
          console.error('Prod Grid QV: error loading product', err);
          STATUS.textContent = 'Unable to load product: ' + (err.message || err);
          showModal();
        });
    }

    function setDescription(html){
      try {
        const tmp = document.createElement('div');
        tmp.innerHTML = html || '';
        DESC.textContent = (tmp.textContent || '').trim();
      } catch(e){ DESC.textContent = ''; }
    }

    // Document-level click handler (robust for Theme Editor)
    document.addEventListener('click', function(ev){
      const btn = ev.target.closest('.quick-btn');
      if (!btn) return;
      // ensure button is inside THIS section
      if (!sectionEl.contains(btn)) return;
      ev.preventDefault();
      const handle = btn.getAttribute('data-handle');
      openQuickView(handle);
    });

    // Close handlers
    CLOSE.addEventListener('click', hideModal);
    ROOT.addEventListener('click', (e)=> { if (e.target === ROOT) hideModal(); });
    document.addEventListener('keydown', (e)=> { if (e.key === 'Escape' && ROOT.classList.contains('active')) hideModal(); });

    // Form submit (Add to cart)
    FORM.addEventListener('submit', function(e){
      e.preventDefault();
      const variantId = VAR_INPUT.value;
      // check size if exists: find select labelled Size (heuristic)
      const sizeSelect = Array.from(OPTS.querySelectorAll('select')).find(s => (s.previousSibling && /size/i.test(s.previousSibling.textContent)));
      const sizeRequired = !!sizeSelect;
      if (sizeRequired && (!sizeSelect.value || sizeSelect.value === '')) {
        STATUS.textContent = 'Please choose your size.';
        return;
      }
      if (!variantId) {
        STATUS.textContent = 'Please select product options.';
        return;
      }

      STATUS.textContent = 'Adding…';
      getJSON(BASE + 'cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type':'application/json', 'Accept':'application/json' },
        body: JSON.stringify({ id: Number(variantId), quantity: 1 })
      })
      .then(added => {
  STATUS.textContent = added.product_title + ' added ✅';
  refreshCartCount();

  // Always add Soft Winter Jacket as bundle (ID hardcoded)
  getJSON(BASE + 'cart.js').then(cart => {
    const exists = cart.items.some(item => item.id == JACKET_VARIANT_ID);
    if (!exists) {
      return getJSON(BASE + 'cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type':'application/json', 'Accept':'application/json' },
        body: JSON.stringify({ id: JACKET_VARIANT_ID, quantity: 1 })
      }).then(() => {
        STATUS.textContent += ' + Soft Winter Jacket added 🎉';
        refreshCartCount();

        // if your theme has a drawer/mini-cart, try to open it
        if (window.Shopify && Shopify.theme && Shopify.theme.cart && Shopify.theme.cart.open) {
          Shopify.theme.cart.open(); 
        }
      });
    }
  }).catch(()=>{ /* ignore */ });
})
      .catch(err => {
        console.error('Prod Grid QV add error', err);
        STATUS.textContent = 'Could not add to cart: ' + (err.message || err);
      });
    });

    // initial hide
    ROOT.hidden = true;

  } catch (err) {
    console.error('Prod Grid QV fatal error', err);
  }
})();
</script>

{% schema %}
{
  "name": "Prod Grid QV",
  "settings": [],
  "blocks": [
    { "type": "p1", "name": "Product 1", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p2", "name": "Product 2", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p3", "name": "Product 3", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p4", "name": "Product 4", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p5", "name": "Product 5", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] },
    { "type": "p6", "name": "Product 6", "settings": [ { "type": "product", "id": "product", "label": "Select product" } ] }
  ],
  "max_blocks": 6,
  "presets": [ { "name": "Prod Grid QV", "category": "Custom" } ]
}
{% endschema %}
