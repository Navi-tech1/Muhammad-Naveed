{% comment %}
Product Grid (6) with Hover Info
- Choose 6 products individually
- Hover effect on product card: show product info overlay
- Responsive grid: 2 cols mobile, 3 cols desktop
- Quick view popup modal
- Auto-add Soft Winter Jacket when Black+Medium variants are selected
{% endcomment %}

<section id="section-{{ section.id }}" class="custom-grid">
  <div class="grid">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign prod = all_products[block.settings.product] %}
        <div class="card" {{ block.shopify_attributes }}>
          <a href="{{ prod.url }}" class="card-media">
            {% if prod.featured_image %}
              <img 
                src="{{ prod.featured_image | img_url: '400x' }}" 
                alt="{{ prod.title }}" 
                loading="lazy" 
              />
            {% endif %}
            <div class="hover-overlay">
              <div class="hover-info">
                <h3 class="card-title">{{ prod.title }}</h3>
                <div class="card-price">
                  {% if prod.price_varies %}
                    From {{ prod.price_min | money }}
                  {% else %}
                    {{ prod.price | money }}
                  {% endif %}
                </div>
                {% if prod.description != blank %}
                  <div class="card-desc">{{ prod.description | strip_html | truncate: 80 }}</div>
                {% endif %}
                <button class="quick-view-btn" data-product-id="{{ prod.id }}" data-product-handle="{{ prod.handle }}">
                  Quick View
                </button>
              </div>
            </div>
          </a>
        </div>
      {% else %}
        <div class="placeholder">Select a product</div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- Quick View Modal -->
<div id="quick-view-modal" class="quick-view-modal">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close" id="modal-close">&times;</button>
    <div class="modal-body">
      <div class="product-image">
        <img id="modal-product-image" src="" alt="" />
      </div>
      <div class="product-details">
        <h2 id="modal-product-title"></h2>
        <div class="product-price" id="modal-product-price"></div>
        <div class="product-description" id="modal-product-description"></div>
        
        <form class="product-form" id="quick-view-form">
          <input type="hidden" id="modal-product-id" name="id" value="">
          
          <!-- Color Selection -->
          <div class="form-group">
            <label>Color</label>
            <div class="color-options" id="color-options">
              <button type="button" class="color-btn active" data-color="grey">
                <span>Grey</span>
              </button>
              <button type="button" class="color-btn" data-color="black">
                <span>Black</span>
              </button>
            </div>
          </div>
          
          <!-- Size Selection -->
          <div class="form-group">
            <label>Size</label>
            <select class="size-select" id="size-select">
              <option value="">Choose your size</option>
              <option value="xs">XS</option>
              <option value="s">S</option>
              <option value="m">M</option>
              <option value="l">L</option>
              <option value="xl">XL</option>
              <option value="xxl">XXL</option>
            </select>
          </div>
          
          <!-- Add to Cart Button -->
          <button type="submit" class="add-to-cart-btn" id="add-to-cart-btn">
            <span class="btn-text">ADD TO CART</span>
            <span class="btn-loading" style="display: none;">Adding...</span>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
/* Grid - Reduced sizes for better aesthetics */
.custom-grid .grid { 
  display: grid; 
  grid-template-columns: repeat(2, 1fr); 
  gap: 12px; 
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 16px;
}
@media (min-width: 768px){
  .custom-grid .grid { 
    grid-template-columns: repeat(3, 1fr); 
    gap: 16px; 
  }
}

/* Card - Reduced size and improved styling */
.card { 
  border: 1px solid rgba(0,0,0,.08); 
  border-radius: 8px; 
  overflow: hidden; 
  position: relative; 
  transition: transform .25s ease, box-shadow .25s ease;
  background: #fff;
}
.card:hover { 
  transform: translateY(-2px); 
  box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

/* Image + overlay - Optimized for smaller cards */
.card-media { 
  position: relative; 
  display: block; 
  overflow: hidden; 
  aspect-ratio: 3/4;
}
.card-media img { 
  width: 100%; 
  height: 100%;
  object-fit: cover;
  transition: transform .3s ease; 
}
.card:hover img { transform: scale(1.05); }

.hover-overlay { 
  position: absolute; 
  inset: 0; 
  background: rgba(0,0,0,.7); 
  display: flex; 
  align-items: center; 
  justify-content: center; 
  opacity: 0; 
  transition: opacity .3s ease; 
  color: #fff;
  padding: 16px;
  text-align: center;
}
.card:hover .hover-overlay { opacity: 1; }

.hover-info { max-width: 90%; }
.card-title { font-size: 16px; margin: 0 0 6px; font-weight: 600; }
.card-price { font-weight: 700; margin-bottom: 6px; font-size: 14px; }
.card-desc { font-size: 12px; opacity: .9; margin-bottom: 12px; line-height: 1.4; }

/* Quick View Button */
.quick-view-btn {
  background: rgba(255,255,255,0.95);
  color: #000;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}
.quick-view-btn:hover {
  background: #fff;
  transform: translateY(-1px);
}

/* Placeholder */
.placeholder { 
  border: 1px dashed rgba(0,0,0,.2); 
  border-radius: 8px; 
  padding: 30px; 
  text-align:center; 
  color: #666; 
  font-size: 14px;
}

/* Quick View Modal */
.quick-view-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  display: none;
  align-items: center;
  justify-content: center;
}

.quick-view-modal.active {
  display: flex;
}

.modal-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(4px);
}

.modal-content {
  position: relative;
  background: #fff;
  border-radius: 12px;
  max-width: 700px;
  width: 90%;
  max-height: 90vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0,0,0,0.3);
}

.modal-close {
  position: absolute;
  top: 16px;
  right: 16px;
  background: none;
  border: none;
  font-size: 24px;
  color: #666;
  cursor: pointer;
  z-index: 10;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.3s ease;
}

.modal-close:hover {
  background: rgba(0,0,0,0.1);
}

.modal-body {
  display: flex;
  min-height: 450px;
}

.product-image {
  flex: 1;
  position: relative;
  overflow: hidden;
}

.product-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.product-details {
  flex: 1;
  padding: 32px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.product-details h2 {
  font-size: 22px;
  font-weight: 600;
  margin: 0 0 12px 0;
  color: #000;
}

.product-price {
  font-size: 18px;
  font-weight: 700;
  margin-bottom: 16px;
  color: #000;
}

.product-description {
  font-size: 14px;
  line-height: 1.5;
  color: #666;
  margin-bottom: 24px;
}

/* Form Styles */
.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  font-size: 14px;
  font-weight: 600;
  margin-bottom: 8px;
  color: #000;
}

/* Color Options */
.color-options {
  display: flex;
  gap: 8px;
}

.color-btn {
  flex: 1;
  padding: 10px 14px;
  border: 1px solid #ddd;
  background: #fff;
  color: #000;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
}

.color-btn.active {
  background: #000;
  color: #fff;
  border-color: #000;
}

.color-btn:not(.active):hover {
  background: #f5f5f5;
}

/* Size Select */
.size-select {
  width: 100%;
  padding: 10px 14px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 13px;
  background: #fff;
  color: #000;
  cursor: pointer;
}

.size-select:focus {
  outline: none;
  border-color: #000;
}

/* Add to Cart Button */
.add-to-cart-btn {
  width: 100%;
  padding: 14px 20px;
  background: #000;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  transition: all 0.3s ease;
  margin-top: 16px;
  position: relative;
}

.add-to-cart-btn:hover:not(:disabled) {
  background: #333;
  transform: translateY(-1px);
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
  transform: none;
}

.add-to-cart-btn svg {
  transition: transform 0.3s ease;
}

.add-to-cart-btn:hover:not(:disabled) svg {
  transform: translateX(4px);
}

/* Loading state */
.btn-loading {
  display: none;
}

.add-to-cart-btn.loading .btn-text {
  display: none;
}

.add-to-cart-btn.loading .btn-loading {
  display: inline;
}

/* Responsive Design */
@media (max-width: 768px) {
  .modal-body {
    flex-direction: column;
  }
  
  .product-image {
    height: 250px;
  }
  
  .product-details {
    padding: 20px;
  }
  
  .modal-content {
    width: 95%;
    max-height: 95vh;
  }
  
  .custom-grid .grid {
    gap: 10px;
    padding: 0 12px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Modal elements
  const modal = document.getElementById('quick-view-modal');
  const modalClose = document.getElementById('modal-close');
  const modalOverlay = document.querySelector('.modal-overlay');
  const quickViewBtns = document.querySelectorAll('.quick-view-btn');
  const colorBtns = document.querySelectorAll('.color-btn');
  const quickViewForm = document.getElementById('quick-view-form');
  const addToCartBtn = document.getElementById('add-to-cart-btn');

  // Product data storage
  let currentProductData = null;
  
  // Soft Winter Jacket product ID (you'll need to replace this with actual product ID)
  const SOFT_WINTER_JACKET_ID = 'soft-winter-jacket-id'; // Replace with actual product ID

  // Open modal functionality
  quickViewBtns.forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const productId = this.getAttribute('data-product-id');
      const productHandle = this.getAttribute('data-product-handle');
      
      // Load product data
      loadProductData(productHandle);
      
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    });
  });

  // Close modal functionality
  function closeModal() {
    modal.classList.remove('active');
    document.body.style.overflow = '';
    // Reset form
    quickViewForm.reset();
    colorBtns[0].classList.add('active');
    colorBtns[1].classList.remove('active');
    addToCartBtn.classList.remove('loading');
  }

  modalClose.addEventListener('click', closeModal);
  modalOverlay.addEventListener('click', closeModal);

  // Color selection functionality
  colorBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      colorBtns.forEach(b => b.classList.remove('active'));
      this.classList.add('active');
    });
  });

  // Load product data from Shopify API
  function loadProductData(productHandle) {
    // Show loading state
    addToCartBtn.classList.add('loading');
    
    // Fetch product data from Shopify API
    fetch(`/products/${productHandle}.js`)
      .then(response => response.json())
      .then(product => {
        currentProductData = product;
        
        // Update modal content
        document.getElementById('modal-product-title').textContent = product.title;
        document.getElementById('modal-product-price').textContent = formatPrice(product.price);
        document.getElementById('modal-product-description').textContent = product.description || 'No description available';
        document.getElementById('modal-product-image').src = product.featured_image || 'https://via.placeholder.com/400x500/f0f0f0/666?text=Product+Image';
        document.getElementById('modal-product-image').alt = product.title;
        document.getElementById('modal-product-id').value = product.variants[0]?.id || product.id;
        
        // Remove loading state
        addToCartBtn.classList.remove('loading');
      })
      .catch(error => {
        console.error('Error loading product data:', error);
        // Fallback to placeholder data
        const productData = {
          title: 'Product Title',
          price: '0.00',
          description: 'Product description not available.',
          image: 'https://via.placeholder.com/400x500/f0f0f0/666?text=Product+Image',
          id: productHandle
        };
        
        document.getElementById('modal-product-title').textContent = productData.title;
        document.getElementById('modal-product-price').textContent = productData.price;
        document.getElementById('modal-product-description').textContent = productData.description;
        document.getElementById('modal-product-image').src = productData.image;
        document.getElementById('modal-product-image').alt = productData.title;
        document.getElementById('modal-product-id').value = productData.id;
        
        addToCartBtn.classList.remove('loading');
      });
  }

  // Format price for display
  function formatPrice(price) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price / 100);
  }

  // Add to cart functionality using Shopify AJAX API
  function addToCart(items) {
    return fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ items: items })
    });
  }

  // Check if Soft Winter Jacket should be auto-added
  function shouldAutoAddWinterJacket(color, size) {
    return color === 'black' && size === 'm';
  }

  // Form submission with proper cart functionality
  quickViewForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const selectedColor = document.querySelector('.color-btn.active').getAttribute('data-color');
    const selectedSize = document.getElementById('size-select').value;
    
    if (!selectedSize) {
      alert('Please select a size');
      return;
    }
    
    // Show loading state
    addToCartBtn.classList.add('loading');
    addToCartBtn.disabled = true;
    
    // Prepare items to add to cart
    const itemsToAdd = [
      {
        id: document.getElementById('modal-product-id').value,
        quantity: 1,
        properties: {
          'Color': selectedColor,
          'Size': selectedSize
        }
      }
    ];
    
    // Auto-add Soft Winter Jacket if Black + Medium is selected
    if (shouldAutoAddWinterJacket(selectedColor, selectedSize)) {
      itemsToAdd.push({
        id: SOFT_WINTER_JACKET_ID,
        quantity: 1,
        properties: {
          'Auto-added': 'Yes',
          'Reason': 'Black + Medium variant selected'
        }
      });
    }
    
    // Add items to cart
    addToCart(itemsToAdd)
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to add to cart');
        }
        return response.json();
      })
      .then(data => {
        // Success - update cart count and show confirmation
        updateCartCount();
        showSuccessMessage();
        closeModal();
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        alert('Failed to add product to cart. Please try again.');
      })
      .finally(() => {
        // Reset button state
        addToCartBtn.classList.remove('loading');
        addToCartBtn.disabled = false;
      });
  });

  // Update cart count in header (if cart count element exists)
  function updateCartCount() {
    const cartCountElements = document.querySelectorAll('.cart-count, .cart-count-bubble');
    if (cartCountElements.length > 0) {
      // Fetch current cart and update count
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          cartCountElements.forEach(element => {
            element.textContent = cart.item_count;
            element.style.display = cart.item_count > 0 ? 'block' : 'none';
          });
        })
        .catch(error => console.error('Error updating cart count:', error));
    }
  }

  // Show success message
  function showSuccessMessage() {
    // Create and show a success notification
    const notification = document.createElement('div');
    notification.className = 'cart-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span>✓ Product added to cart successfully!</span>
        <button class="notification-close">&times;</button>
      </div>
    `;
    
    // Add styles
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #4CAF50;
      color: white;
      padding: 12px 20px;
      border-radius: 4px;
      z-index: 10000;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      animation: slideIn 0.3s ease;
    `;
    
    // Add animation styles
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      .notification-content {
        display: flex;
        align-items: center;
        gap: 10px;
      }
      .notification-close {
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
    
    // Manual close
    notification.querySelector('.notification-close').addEventListener('click', () => {
      notification.remove();
    });
  }

  // Close modal on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modal.classList.contains('active')) {
      closeModal();
    }
  });
});
</script>

{% schema %}
{
  "name": "Product Grid Hover",
  "settings": [],
  "blocks": [
    {
      "type": "product_1",
      "name": "Product 1",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_2",
      "name": "Product 2",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_3",
      "name": "Product 3",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_4",
      "name": "Product 4",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_5",
      "name": "Product 5",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    },
    {
      "type": "product_6",
      "name": "Product 6",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid Hover",
      "category": "Custom"
    }
  ]
}
{% endschema %}

